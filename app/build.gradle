apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
//apply plugin: 'davis'

//定义扩展属性
//ext{
//    compileSdkVersion = 29
//    minSdkVersion = 21
//    lib_lifecycle_service = 'androidx.lifecycle:lifecycle-service:2.2.0'
//}

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    viewBinding {
        enabled = true
    }

    dataBinding {
        enabled = true
    }

    sourceSets{
        main{
            res.srcDirs = ['./src/main/res','src/main/res-ad','src/main/res-player']
        }
    }

}
kapt{
    arguments{
        arg('eventBusIndex','com.example.android_arch.eventbus.MyEventbusIndex')
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation project(":viewapp")
    implementation project(":pluginLib")
    implementation project(":tinkerdemo")
    implementation rootProject.ext.dependencies.commonlib.lib_lifecycle_service
    implementation "androidx.lifecycle:lifecycle-process:2.2.0"
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.3.9'

    //eventbus依赖
    def eventbus_version = '3.2.0'
    implementation "org.greenrobot:eventbus:$eventbus_version"
    kapt "org.greenrobot:eventbus-annotation-processor:$eventbus_version"
    implementation 'androidx.recyclerview:recyclerview:1.0.0'
}
//task方式直接创建
task helloTask {
    println("i am heelo task")
}
helloTask.setGroup("myCoustom")


task "task1"(group: 'myCoustom', dependsOn: 'this is a test') {
    println("i am heelo task1")
}

//TaskContainer创建
this.tasks.create("task2") {
    println("hello i am hello task2")
}

task excuteTask(group: 'myCoustom') {
    doFirst {
        println("this first do first")
    }

    doFirst {
        println("this sencond do first")
    }
}
excuteTask.doFirst {
    println("this three do first")
}
//计算build总时长
this.afterEvaluate { Project project ->
    def startTime;
    def endTime;

    def preBuildTask = project.tasks.getByName("preBuild")
    preBuildTask.doFirst {
        startTime = System.currentTimeMillis()
    }

    def buildTask = project.tasks.getByName("build")
    buildTask.doLast {
        endTime = System.currentTimeMillis()
        println("build总时长${endTime - startTime}")
    }
}

task taskX{
    doLast {
        println("taskX")
    }
}

task taskY{
    doLast {
        println("tasky")
    }
}

task taskZ(dependsOn: [taskX,taskY],group: "myCoustom"){
    dependsOn{
        return this.tasks.findAll {
            it.name.startsWith("lib")
        }
    }
    doLast {
        println("taskz")
    }
}


task lib1{
    doLast {
        println("lib1")
    }
}

task lib2{
    doLast {
        println("lib2")
    }
}

task lib3{
    doLast {
        println("lib3")
    }
}

ext{
    versionCode = 100
    versionName = "1.0.0"
    versionTxt = new File('versionTxt.txt')
    if (!versionTxt.exists()){
        versionTxt.createNewFile()
    }
}

task writeTask{
    outputs.file(this.versionTxt)
    def file = this.versionTxt as File
    file.write(this.versionCode+"")
    file.write(this.versionName)
}

task readTask{
    inputs.file(this.versionTxt)
    def file = this.versionTxt
    println(file.text)
}


task taskTest(dependsOn: [writeTask,readTask],group: "myCoustom"){

}