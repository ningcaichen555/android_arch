apply from: this.file('config.gradle')

buildscript {
    ext.kotlin_version = "1.3.72"
    repositories {
        google()
        jcenter()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:1.6.10"
        classpath 'com.jakewharton:butterknife-gradle-plugin:9.0.0-rc2'
        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.3'
        classpath 'com.tencent.tinker:tinker-patch-gradle-plugin:1.9.1'
        classpath 'com.hujiang.aspectjx:gradle-android-plugin-aspectjx:2.0.8'
    }
}

allprojects {
    repositories {
        google()
        jcenter()
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}
//
//this.gradle.beforeProject {
//    println("-----------------beforeProject is before configuration ")
//}
//
//this.beforeEvaluate {
//    println("-----------------beforeEvaluate is before configuration ")
//}
//
//this.gradle.afterProject {
//    println("-----------------afterProject is before configuration ")
//}
//
//this.afterEvaluate {
//    println("-----------------afterEvaluate is after configuration ")
//}
//
//this.gradle.buildFinished {
//    println("-----------------buildFinished is build complet")
//}
//
//this.gradle.addProjectEvaluationListener(new ProjectEvaluationListener() {
//    @Override
//    void beforeEvaluate(Project project) {
//
//    }
//
//    @Override
//    void afterEvaluate(Project project, ProjectState state) {
//
//    }
//})

//获取所有的 projects
this.getAllprojects()
def getParentProject(){
    def parent = this.getParent()
    println(parent.getName())

}
def getProjects(){
    this.getAllprojects().eachWithIndex { Project entry, int i ->
        if (i==0){
            println("-----------Root project")
        }else {
            println("+----------${entry.getName()}")
        }

    }
}

/**
 * 在主工程可以配置子工程
 */
project("app"){
    apply 'plugin':'com.android.application'
    group('com.top')
    version '1.0.0'
    dependencies {

    }

    android{

    }
}
/**
 * 配置所有的project
 */
allprojects{
    group('com.top')
    version '1.0.0'
    dependencies {

    }
}
//配置成功
println(project("viewapp").group)

subprojects {
    println("project name is ${it.name} and the plugin is ${it.plugins}")
    if (it.plugins.hasPlugin('com.android.library')){
        println("subProject-------"+project.name)
    }
}
/*为所有的子project配置扩展属性
*/

//subprojects {
//    ext{
//        compileSdkVersion = 29
//        minSdkVersion = 21
//        lib_lifecycle_service = 'androidx.lifecycle:lifecycle-service:2.2.0'
//    }
//}


/*在根工程定义属性
*/

//ext{
//    compileSdkVersion = 29
//    minSdkVersion = 21
//    lib_lifecycle_service = 'androidx.lifecycle:lifecycle-service:2.2.0'
//}

println( this.getRootDir().absolutePath )
println( this.getBuildDir().absolutePath )
println this .getProjectDir().absolutePath

def getFileContent(String path){
    //project中file方法是根据相对路径进行查找
    def file = file(path)
    println(file.text)
}
getFileContent("config.gradle")

copy {
    from("config.gradle")
    into(getProject().getBuildDir())
}

copy {
    from file('app/build/outputs/apk/')
    into getRootProject().getBuildDir().path+"/apk/"
    //排除部分文件
    exclude{

    }
    //重命名
    rename {

    }
}

fileTree('build/outputs/apk'){FileTree fileTree ->
    fileTree.visit{
        println(it.file.name)
    }
}

//buildscript {ScriptHandler scriptHandler ->
//    //配置我们工程的仓库地址
//    repositories {RepositoryHandler repositoryHandler->
//        maven{
//            url ''
//            name 'personal'
//            credentials{
//                username = ''
//                password = ''
//            }
//        }
//    }
//
//    //配置我们的插件的依赖地址->编写gradle的插件地址
//    dependencies {
//        classpath 'com.android.tools.build:gradle:2.2.2'
//    }
//}